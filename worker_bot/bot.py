import asyncio
import os
import logging

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.methods import DeleteWebhook
from states.states import RegistrationStates, ProfileState, DefaultState
from fetches.fetch import fetch_place_data, fetch_rates_data, post_user_info, user_exist, get_user_data, delete_user_data, user_change_column
from keyboards.keyboard import contact_keyboard, confirm_keyboard, delete_keyboard, register_keyboard, location_keyboard, profile_view_keyboard, profile_column_keyboard


load_dotenv()
logging.basicConfig(level=logging.INFO)

TOKEN = os.environ['WORKER-TOKEN']
bot = Bot(token=TOKEN)
dp = Dispatcher(bot=bot)


async def send_place(message, options):
    kb = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text=item['name'], callback_data=item['callback_data'])] for item in options]) # one line button one item 

    await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:", reply_markup=kb)


@dp.message(CommandStart())
async def start_command(message: types.Message, state: FSMContext):
    user_data = await get_user_data(message.from_user.id, token=TOKEN)
    if user_data != None:
        await message.answer("""
–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–º–∞–Ω–¥—ã:

/start - –î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–ª—è —Ä–µ—Å—Ç–∞—Ä—Ç–∞
/help - –î–ª—è –ø–æ–º–æ—â–∏
                             
–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É - –ü—Ä–æ—Ñ–∏–ª—å - –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                             """, reply_markup=profile_view_keyboard)
    else:
        await message.answer(f"""
–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–º–∞–Ω–¥—ã:

/start - –î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–ª—è —Ä–µ—Å—Ç–∞—Ä—Ç–∞
/help - –î–ª—è –ø–æ–º–æ—â–∏
                             
–ß—Ç–æ –±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
                             """, reply_markup=register_keyboard)


@dp.message(RegistrationStates.name)
async def process_name(message: types.Message, state: FSMContext):
    try:
        full_name = message.text.split(" ")
        await state.update_data(first_name=full_name[0], last_name=full_name[1], surname=full_name[2], telegram_id=message.from_user.id)
        await message.answer(
            """
    <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è Telegram –±–æ—Ç–∞</b>
    """, reply_markup=confirm_keyboard, parse_mode="html"
        )
        await state.set_state(RegistrationStates.confirmation)
    except IndexError or AttributeError as e:
        await bot.send_message(message.from_user.id, "–£ –≤–∞—Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
        await message.answer(f"–í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ò–º—è –§–∞–º–∏–ª–∏—è –û—Ç—á–µ—Å—Ç–≤–æ\n\n–ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª!")


@dp.callback_query(RegistrationStates.confirmation)
async def confirmation_query(callback_query: types.CallbackQuery, state: FSMContext):
    confirm_data = callback_query.data
    await callback_query.message.delete()

    if confirm_data == "true":
        await bot.send_message(callback_query.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç", reply_markup=contact_keyboard)

        await state.update_data(is_confirm=confirm_data)

        await state.set_state(RegistrationStates.phone_number)

    else:
        await bot.send_message(callback_query.from_user.id, "Cancel")
        await state.clear()


@dp.message(RegistrationStates.phone_number, F.contact)
async def process_contact(message: types.Message, state: FSMContext):
    contact = message.contact
    await state.update_data(phone_number=contact.phone_number)

    data = await fetch_place_data(TOKEN)
    
    options = [{'name': item['name'], 'callback_data': str(item['id'])} for item in data]

    await send_place(message, options)

    await state.set_state(RegistrationStates.place)


@dp.callback_query(RegistrationStates.place)
async def callback_query_process_place(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(place=callback_query.data)
    await callback_query.message.delete()

    context = await state.get_data()
    print(context)

    try:
        data = await post_user_info(data=context, token=TOKEN)
        if data == 201:
            await bot.send_message(callback_query.from_user.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!", reply_markup=profile_view_keyboard)
            await state.clear()
        else:
            await bot.send_message(callback_query.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!", reply_markup=register_keyboard)
    except Exception as e:
        print(e)
        await bot.send_message(callback_query.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!", reply_markup=register_keyboard)
    
    await state.set_state()


@dp.message()
async def registration_start(message: types.Message, state: FSMContext):
    message_answer = message.text
    if message_answer == "–ü—Ä–æ—Ñ–∏–ª—å":
        user_data = await get_user_data(message.from_user.id, token=TOKEN)
        if user_data != None:
            status = "–ê–∫—Ç–∏–≤–µ–Ωüü¢" if user_data["is_active"] == True else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ωüî¥"
            await message.answer(f"–ò–º—è: {user_data['first_name']}\n–§–∞–º–∏–ª–∏—è: {user_data['last_name']}\n–û—Ç—á–µ—Å—Ç–≤–æ: {user_data['surname']}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_data['phone_number']}\n–°—Ç–∞—Ç—É—Å: {status}", reply_markup=delete_keyboard)
            await state.set_state(ProfileState.profile)
        else:
            await message.answer("–≤—ã –µ—â—ë –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å", reply_markup=register_keyboard)
    elif message_answer == "–ü—Ä–æ–π—Ç–∏ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é":
        status = await user_exist(message.from_user.id, token=TOKEN)
        if status == 200:
            await message.answer(f"–í—ã —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!", reply_markup=profile_view_keyboard)
        else:
            await message.answer(f"–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ò–º—è –§–∞–º–∏–ª–∏—è –û—Ç—á–µ—Å—Ç–≤–æ\n\n–ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª!")
            await state.set_state(RegistrationStates.name)
    elif message_answer == "–ü–æ–º–æ—â—å":
        await message.answer(f"link to operator", reply_markup=profile_view_keyboard)
    elif message_answer == "–ù–∞–∑–∞–¥":
        await message.answer(f"–ì–ª–∞–≤–Ω–∞—è –º–µ–Ω—å—é\n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏", reply_markup=profile_view_keyboard)
    else:
        await message.answer("–î–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /help")


async def main():
    await bot(DeleteWebhook(drop_pending_updates=True))
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
