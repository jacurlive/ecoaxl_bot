import asyncio
import os
import logging

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.methods import DeleteWebhook
from states.states import RegistrationStates, ProfileState, DefaultState
from fetches.fetch import fetch_place_data, fetch_rates_data, post_user_info, user_exist, get_user_data, delete_user_data, user_change_column
from keyboards.keyboard import contact_keyboard, confirm_keyboard, delete_keyboard, register_keyboard, location_keyboard, profile_view_keyboard, profile_column_keyboard


load_dotenv()
logging.basicConfig(level=logging.INFO)

TOKEN = os.environ['TOKEN']
bot = Bot(token=TOKEN)
dp = Dispatcher(bot=bot)


async def send_place(message, options):
    kb = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text=item['name'], callback_data=item['callback_data'])] for item in options]) # one line button one item 

    await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:", reply_markup=kb)


async def send_rates(chat_id, options):
    kb = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text=item['name'], callback_data=item['callback_data'])] for item in options], row_width=1)

    await bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", chat_id.message.chat.id, chat_id.message.message_id, reply_markup=kb)


@dp.message(CommandStart())
async def start_command(message: types.Message, state: FSMContext):
    user_data = await get_user_data(message.from_user.id, token=TOKEN)
    if user_data != None:
        await message.answer("""
–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–º–∞–Ω–¥—ã:

/start - –î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–ª—è —Ä–µ—Å—Ç–∞—Ä—Ç–∞
/help - –î–ª—è –ø–æ–º–æ—â–∏
                             
–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É - –ü—Ä–æ—Ñ–∏–ª—å - –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                             """, reply_markup=profile_view_keyboard)
        await state.set_state(DefaultState.main)
    else:
        await message.answer(f"""
–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–º–∞–Ω–¥—ã:

/start - –î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–ª—è —Ä–µ—Å—Ç–∞—Ä—Ç–∞
/help - –î–ª—è –ø–æ–º–æ—â–∏
                             
–ß—Ç–æ –±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
                             """, reply_markup=register_keyboard)
        await state.set_state(DefaultState.main)


@dp.message(Command("help"))
async def help_command(message: types.Message):
    await message.answer(f"/help link to operator")


@dp.message(DefaultState.main)
async def registration_start(message: types.Message, state: FSMContext):
    message_answer = message.text
    if message_answer == "–ü—Ä–æ—Ñ–∏–ª—å":
        user_data = await get_user_data(message.from_user.id, token=TOKEN)
        if user_data != None:
            status = "–ê–∫—Ç–∏–≤–µ–Ωüü¢" if user_data["is_active"] == True else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ωüî¥"
            await message.answer(f"–∏–º—è: {user_data['name']}\n–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_data['phone_number']}\n–Ω–æ–º–µ—Ä –¥–æ–º–∞: {user_data['house_number']}\n–Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã: {user_data['apartment_number']}\n–Ω–æ–º–µ—Ä –ø–æ–¥—å–µ–∑–¥–∞: {user_data['entrance_number']}\n—ç—Ç–∞–∂: {user_data['floor_number']}\n–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∞–¥—Ä–µ—Å—É: {user_data['comment_to_address']}\n–°—Ç–∞—Ç—É—Å: {status}", reply_markup=delete_keyboard)
            await state.set_state(ProfileState.profile)
        else:
            await message.answer("–≤—ã –µ—â—ë –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å")
    elif message_answer == "–ü—Ä–æ–π—Ç–∏ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é":
        status = await user_exist(message.from_user.id, token=TOKEN)
        if status == 200:
            await message.answer(f"–í—ã —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!")
        else:
            await message.answer(f"–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è:")
            await state.set_state(RegistrationStates.name)
    elif message_answer == "–ü–æ–º–æ—â—å":
        await message.answer(f"/help link to operator", reply_markup=profile_view_keyboard)
    else:
        await message.answer("–î–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /help")


@dp.message(ProfileState.profile)
async def delete_process(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == "–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç‚ùå":
        delete_response = await delete_user_data(message.from_user.id, token=TOKEN)
        if delete_response == 204:
            await message.delete()
            await bot.send_message(message.from_user.id, "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
        else:
            await bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")
        await state.clear()
    elif answer == "–†–µ–¥–∞–∫—Ç–æ—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=profile_column_keyboard)
        await state.set_state(ProfileState.change)


@dp.callback_query(ProfileState.change)
async def change_process(callback_query: types.CallbackQuery, state: FSMContext):
    callback_data = callback_query.data
    await state.set_state(ProfileState.change_process)
    if callback_data == "name":
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
        await state.update_data(column_name="name")
    elif callback_data == "house_number":
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞:")
        await state.update_data(column_name="house_number")
    elif callback_data == "apartment_number":
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã:")
        await state.update_data(column_name="apartment_number")
    elif callback_data == "entrance_number":
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–¥—å–µ–∑–¥–∞:")
        await state.update_data(column_name="entrance_number")
    elif callback_data == "floor_number":
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —ç—Ç–∞–∂–∞:")
        await state.update_data(column_name="floor_number")
    elif callback_data == "comment_to_address":
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∞–¥—Ä–µ—Å—É:")
        await state.update_data(column_name="comment_to_address")
    else:
        await bot.send_message(callback_query.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!", reply_markup=profile_view_keyboard)


@dp.message(ProfileState.change_process)
async def name_change_process(message: types.Message, state: FSMContext):
    new_name = message.text
    callback_context = await state.get_data()
    column_name = callback_context.get("column_name")
    context = {
        column_name: new_name
    }
    status = await user_change_column(telegram_id=message.from_user.id, data=context, token=TOKEN)
    if status == 200:
        await message.answer(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!", reply_markup=profile_view_keyboard)
        await state.set_state(DefaultState.main)
    else:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!", reply_markup=profile_view_keyboard)
        await state.set_state(DefaultState.main)


@dp.message(RegistrationStates.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text, telegram_id=message.from_user.id)
    await message.answer(
        """
<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è Telegram –±–æ—Ç–∞</b>

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –æ–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Telegram –±–æ—Ç–∞, –∑–∞–Ω–∏–º–∞—é—â–µ–≥–æ—Å—è –∫–æ–º–º–µ—Ä—Ü–∏–µ–π –≤ —Å—Ñ–µ—Ä–µ —É—Å–ª—É–≥. –≠—Ç–∏ —É—Å–ª–æ–≤–∏—è –æ–ø–∏—Å—ã–≤–∞—é—Ç –≤–∑–∞–∏–º–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–µ–∂–¥—É –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞ –∏ –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞.

<b>1. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥</b>
   1.1. –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É—Å–ª—É–≥–∏ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞ –∏ –æ–±—è–∑—É–µ—Ç—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —É—Å–ª—É–≥, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º –≤ –±–æ—Ç–µ.
   1.2. –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –∏–∑–º–µ–Ω—è—Ç—å, –æ–±–Ω–æ–≤–ª—è—Ç—å –∏–ª–∏ –ø—Ä–µ–∫—Ä–∞—â–∞—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ª—é–±—ã—Ö —É—Å–ª—É–≥ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

<b>2. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏</b>
   2.1. –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ª—é–±—ã–µ –ø—Ä—è–º—ã–µ –∏–ª–∏ –∫–æ—Å–≤–µ–Ω–Ω—ã–µ —É–±—ã—Ç–∫–∏, –ø–æ–Ω–µ—Å–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã—Ö –±–æ—Ç–æ–º.
   2.2. –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ø—Ä–æ–±–ª–µ–º—ã, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –∏–∑-–∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
   2.3. –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ª—é–±—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å Telegram –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π –∏–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –±–æ—Ç–∞–º–∏ –∏–ª–∏ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏.

<b>3. –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å</b>
   3.1. –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –æ–±—è–∑—É–µ—Ç—Å—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∏–º–µ–Ω–∏–º—ã–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º –æ –∑–∞—â–∏—Ç–µ –¥–∞–Ω–Ω—ã—Ö.
   3.2. –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –Ω–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º –±–µ–∑ –∏—Ö –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è, –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º —Å–ª—É—á–∞–µ–≤, –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º.

<b>4. –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å</b>
   4.1. –í—Å–µ –ø—Ä–∞–≤–∞ –Ω–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –±–æ—Ç–æ–º (–≤–∫–ª—é—á–∞—è, –Ω–æ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—è—Å—å, –∞–≤—Ç–æ—Ä—Å–∫–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏ –∏ —Ç–æ–≤–∞—Ä–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏), –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.
   4.2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å, –∏–∑–º–µ–Ω—è—Ç—å –∏–ª–∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–æ—Ç–∞ –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–µ–Ω–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞.

<b>5. –ó–∞–ø—Ä–µ—Ç –Ω–∞ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ</b>
   5.1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–≥–æ, –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –∏–ª–∏ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.
   5.2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞, —Å–ø–∞–º–∞ –∏–ª–∏ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–≤—Ä–µ–¥–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞ –∏–ª–∏ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.

<b>6. –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è</b>
   6.1. –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –∏–∑–º–µ–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è.
   6.2. –ò–∑–º–µ–Ω–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –±–æ—Ç–µ –∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–≤ –≤–∏–¥–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–±—è–∑—É—é—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.

<b>7. –ü—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</b>
   7.1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.
   7.2. –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ —Å–ª—É—á–∞–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —É—Å–ª–æ–≤–∏–π –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –∏–ª–∏ –≤ —Å–ª—É—á–∞–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–µ–π—Å—Ç–≤–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –∏–ª–∏ –º–æ—Ä–∞–ª—å–Ω–æ-—ç—Ç–∏—á–µ—Å–∫–∏–º –Ω–æ—Ä–º–∞–º.

<b>8. –ü—Ä–∏–º–µ–Ω–∏–º–æ–µ –ø—Ä–∞–≤–æ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–ø–æ—Ä–æ–≤</b>
   8.1. –î–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç—Å—è –∏ —Ç–æ–ª–∫—É–µ—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º —Å—Ç—Ä–∞–Ω—ã, –≤ –∫–æ—Ç–æ—Ä–æ–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞.
   8.2. –õ—é–±—ã–µ —Å–ø–æ—Ä—ã, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –º–µ–∂–¥—É –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –±—É–¥—É—Ç —Ä–∞–∑—Ä–µ—à–∞—Ç—å—Å—è –ø—É—Ç–µ–º –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞. –í —Å–ª—É—á–∞–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏—è, —Å–ø–æ—Ä—ã –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ–≥–æ —Å—É–¥–∞.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–º–µ–π—Ç–µ –≤ –≤–∏–¥—É, —á—Ç–æ –¥–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏—à—å –æ–±—â–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞. –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –º–æ–∂–µ—Ç —Ç–∞–∫–∂–µ –∏–º–µ—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –∏ —É—Å–ª–æ–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –±–æ—Ç–µ –∏–ª–∏ –Ω–∞ –µ–≥–æ –≤–µ–±-—Å–∞–π—Ç–µ.
""", reply_markup=confirm_keyboard, parse_mode="html"
    )
    await state.set_state(RegistrationStates.confirmation)


@dp.callback_query(RegistrationStates.confirmation)
async def confirmation_query(callback_query: types.CallbackQuery, state: FSMContext):
    confirm_data = callback_query.data
    await callback_query.message.delete()

    if confirm_data == "true":
        await bot.send_message(callback_query.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç", reply_markup=contact_keyboard)

        await state.update_data(is_confirm=confirm_data)

        await state.set_state(RegistrationStates.phone_number)

    else:
        await bot.send_message(callback_query.from_user.id, "Cancel")
        await state.clear()


@dp.message(RegistrationStates.phone_number, F.contact)
async def process_contact(message: types.Message, state: FSMContext):
    contact = message.contact
    await state.update_data(phone_number=contact.phone_number)

    data = await fetch_place_data(TOKEN)
    
    options = [{'name': item['name'], 'callback_data': str(item['id'])} for item in data]

    await send_place(message, options)

    await state.set_state(RegistrationStates.place)


@dp.callback_query(RegistrationStates.place)
async def callback_query_process_place(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(place=callback_query.data)
    data = await fetch_rates_data(TOKEN)

    options = [{'name': item['rate_name'], 'callback_data': str(item['id'])} for item in data]

    await send_rates(callback_query, options)

    await state.set_state(RegistrationStates.rate)


@dp.callback_query(RegistrationStates.rate)
async def callback_query_process_rate(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(rate=callback_query.data)
    await callback_query.message.delete()
    await bot.send_message(callback_query.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é:", reply_markup=location_keyboard)
    await state.set_state(RegistrationStates.location)


@dp.message(RegistrationStates.location, F.location)
async def handle_location(message: types.Message, state: FSMContext):
    latitude = message.location.latitude
    longitude = message.location.longitude

    await state.update_data(latitude=latitude, longitude=longitude)

    message_id = await bot.send_message(message.from_user.id, """
–≤–≤–∏–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ :

–î–æ–º/–∫–≤–∞—Ç—Ä–∏—Ä—É/–ü–æ–¥—å–µ–∑–¥/–≠—Ç–∞–∂

–ü—Ä–∏–º–µ—Ä: 30/16/2/1
                                        """)
    await state.update_data(message_id=message_id.message_id)
    await state.set_state(RegistrationStates.home)


@dp.message(RegistrationStates.home)
async def process_house_data(message: types.Message, state: FSMContext):
    try:
        list_data = message.text.split("/")
        
        await state.update_data(house_number=list_data[0], apartment_number=list_data[1], entrance_number=list_data[2], floor_number=list_data[3])
        await message.delete()
        
        data = await state.get_data()
        
        message_id = data.get("message_id")
        message_id = await bot.edit_message_text("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∞–¥—Ä–µ—Å—É:", message.chat.id, message_id)
        
        await state.update_data(message_id=message_id.message_id)
        await state.set_state(RegistrationStates.comment)
    except IndexError or AttributeError as e:
        print(e)
        await bot.send_message(message.from_user.id, "–£ –≤–∞—Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
        message_id = await bot.send_message(message.from_user.id, """
–≤–≤–∏–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ :

–î–æ–º/–∫–≤–∞—Ç—Ä–∏—Ä—É/–ü–æ–¥—å–µ–∑–¥/–≠—Ç–∞–∂

–ü—Ä–∏–º–µ—Ä: 30/16/2/1
    """)
        await state.update_data(message_id=message_id.message_id)


@dp.message(RegistrationStates.comment)
async def process_comment(message: types.Message, state: FSMContext):
    await state.update_data(comment_to_address=message.text)
    await message.delete()

    context = await state.get_data()
    message_id = context.get("message_id")

    try:
        await post_user_info(data=context, token=TOKEN)
        
        await bot.edit_message_text("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!", message.chat.id, message_id)
        await state.clear()
    except Exception as e:
        print(e)
        await bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")


async def main():
    await bot(DeleteWebhook(drop_pending_updates=True))
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
